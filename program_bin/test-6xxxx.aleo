 is.eq r1 r0 into r14;
    is.eq r3 r2 into r15;
    is.eq r5 r4 into r16;
    is.eq r7 r6 into r17;
    is.eq r9 r8 into r18;
    is.eq r11 r10 into r19;

    hash.psd2 r12 into r20 as u8;
    hash.psd2 r13 into r21 as u8;

    hash.psd2 r12 into r22 as u16;
    hash.psd2 r13 into r23 as u16;

    hash.psd2 r12 into r24 as u32;
    hash.psd2 r13 into r25 as u32;

    hash.psd2 r12 into r26 as u64;
    hash.psd2 r13 into r27 as u64;

    hash.psd2 r12 into r28 as u128;
    hash.psd2 r13 into r29 as u128;

    mul.w r3 r2 into r30;
    mul.w r5 r4 into r31;
    mul.w r7 r6 into r32;
    mul.w r9 r8 into r33;
    mul.w r11 r10 into r34;

    ternary r15 r30 r2 into r35;
    ternary r16 r31 r4 into r36;
    ternary r17 r32 r6 into r37;
    ternary r18 r33 r8 into r38;
    ternary r19 r34 r10 into r39;

    pow.w r25 r24 into r40;
    gte r25 r24 into r41;
    xor r39 r11 into r42;
    pow.w r25 r24 into r43;
    mul r13 r12 into r44;
    cast.lossy r44 into r45 as i16;
    or r27 1u64 into r46;
    rem.w r26 r46 into r47;
    xor r29 r28 into r48;
    lte r27 r26 into r49;
    lt r37 r7 into r50;
    add.w r38 r9 into r51;
    xor r45 r36 into r52;
    lte r44 r13 into r53;
    ternary r53 r37 r7 into r54;
    is.eq r13 0field into r55;
    ternary r55 r12 r13 into r56;
    add.w r42 r39 into r57;
    add.w r37 r7 into r58;
    add.w r27 r26 into r59;
    square r44 into r60;
    xor r23 r22 into r61;
    lte r25 r24 into r62;
    add.w r59 r27 into r63;
    mul r60 r56 into r64;
    cast.lossy r64 into r65 as i128;
    add.w r51 r38 into r66;
    is.eq r66 -9223372036854775808i64 into r67;
    add.w r66 1i64 into r68;
    ternary r67 r68 r66 into r69;
    neg r69 into r70;
    xor r65 r57 into r71;
    ternary r67 r48 r29 into r72;
    pow.w r66 r25 into r73;
    mul r64 r60 into r74;
    cast.lossy r74 into r75 as u8;
    lte r74 r64 into r76;
    shr.w r66 r75 into r77;
    add.w r48 r29 into r78;
    square r64 into r79;
    add.w r61 r23 into r80;
    square r74 into r81;
    lte r80 r61 into r82;
    mul r81 r79 into r83;
    cast.lossy r83 into r84 as i16;
    mul.w r84 r52 into r85;
    shl.w r25 r80 into r86;
    gte r83 r81 into r87;
    lt r66 r51 into r88;
    shl.w r80 r25 into r89;
    xor r58 r37 into r90;
    xor r80 r61 into r91;
    ternary r88 r75 r21 into r92;
    lte r90 r58 into r93;
    gt r66 r51 into r94;
    add r83 r81 into r95;
    mul r95 r83 into r96;
    cast.lossy r96 into r97 as u32;
    lte r78 r48 into r98;
    add r96 r95 into r99;
    square r96 into r100;
    or r97 1u32 into r101;
    div.w r25 r101 into r102;
    mul.w r78 r48 into r103;
    lte r71 r65 into r104;
    gt r91 r80 into r105;
    pow.w r103 r91 into r106;
    mul r100 r99 into r107;
    cast.lossy r107 into r108 as u16;
    square r100 into r109;
    square r107 into r110;
    add.w r71 r65 into r111;
    add.w r85 r84 into r112;
    lt r63 r59 into r113;
    xor r63 r59 into r114;
    lte r66 r51 into r115;
    ternary r115 r97 r25 into r116;
    mul r110 r109 into r117;
    cast.lossy r117 into r118 as u16;
    lt r114 r63 into r119;
    mul r117 r110 into r120;
    cast.lossy r120 into r121 as u32;
    not r35 into r122;
    and r118 r108 into r123;
    square r117 into r124;
    mul r124 r120 into r125;
    pow.w r75 r21 into r126;
    shl.w r103 r121 into r127;
    gte r90 r58 into r128;
    mul r125 r124 into r129;
    cast.lossy r129 into r130 as u8;
    pow.w r111 r118 into r131;
    add.w r111 r71 into r132;
    shr.w r66 r121 into r133;
    mul r129 r125 into r134;
    cast.lossy r134 into r135 as i64;
    shr.w r90 r118 into r136;
